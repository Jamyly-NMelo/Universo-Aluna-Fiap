{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM7j/jh3nqaI+0bVtI7z7+h",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/patidemitroff/PyPati/blob/main/Grupo16_PBL_1TSCOEAD_Fase5_Parte2.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "YwwDinso7OY8"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import sympy as smp\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import statsmodels.formula.api as sm"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Análise"
      ],
      "metadata": {
        "id": "bMp3ZlDP8gFo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "vendas_2019 = pd.read_csv('/content/vendas_linha_petshop_2019.csv',\n",
        "                              sep = ';',\n",
        "                              encoding='latin1',\n",
        "                              decimal=',')"
      ],
      "metadata": {
        "id": "GnZIBffY_yCv"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "vendas_2020 = pd.read_csv('/content/vendas_linha_petshop_2020.csv',\n",
        "                              sep = ';',\n",
        "                              encoding='latin1',\n",
        "                              decimal=',')"
      ],
      "metadata": {
        "id": "bisc-2LmA0LD"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "vendas_2021 = pd.read_csv('/content/vendas_linha_petshop_2021.csv',\n",
        "                              sep = ';',\n",
        "                              encoding='latin1',\n",
        "                              decimal=',')"
      ],
      "metadata": {
        "id": "kvJsZRcVA3Do"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "vendas_2022 = pd.read_csv('/content/vendas_linha_petshop_2022.csv',\n",
        "                              sep = ';',\n",
        "                              encoding='latin1',\n",
        "                              decimal=',')"
      ],
      "metadata": {
        "id": "t2cf32y8A5b8"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Concatenar as 4 tabelas\n",
        "vendas = pd.concat([vendas_2019, vendas_2020, vendas_2021, vendas_2022], ignore_index=True)\n",
        "vendas"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "qfOpAq_jA82Z",
        "outputId": "08f1d2c3-b5a7-4ff1-a6d2-cb8de3baa618"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        cod_pedido regiao_pais                               produto  valor  \\\n",
              "0                1       Norte          Biscoito  True Champion 300g  22.00   \n",
              "1                2       Norte          Biscoito  True Champion 300g  21.00   \n",
              "2                3       Norte          Biscoito  True Champion 300g  22.00   \n",
              "3                4       Norte          Biscoito  True Champion 300g  19.00   \n",
              "4                5       Norte          Biscoito  True Champion 300g  22.00   \n",
              "...            ...         ...                                   ...    ...   \n",
              "200781      200976     Sudeste  Bandana Disney Mickey Fábrica Petti   19.44   \n",
              "200782      200977     Sudeste  Bandana Disney Mickey Fábrica Petti   21.06   \n",
              "200783      200978         Sul  Bandana Disney Mickey Fábrica Petti   14.58   \n",
              "200784      200979         Sul  Bandana Disney Mickey Fábrica Petti   16.20   \n",
              "200785      200980         Sul  Bandana Disney Mickey Fábrica Petti   14.58   \n",
              "\n",
              "       quantidade  valor_total_bruto        data             estado  \\\n",
              "0             2.0              44.00  13/06/2019               Acre   \n",
              "1             2.0              42.00  03/01/2019              Amapá   \n",
              "2             NaN              44.00  18/01/2019               Pará   \n",
              "3             4.0              88.00  19/08/2019           Rondônia   \n",
              "4             2.0              44.00  18/10/2019          Tocantins   \n",
              "...           ...                ...         ...                ...   \n",
              "200781        3.0              58.32  07/02/2022     Rio de Janeiro   \n",
              "200782        1.0              21.06  06/02/2022     Espírito Santo   \n",
              "200783        3.0              43.74  25/01/2022             Paraná   \n",
              "200784        2.0              32.40  27/03/2022    Santa  Catarina   \n",
              "200785        1.0              14.58  02/04/2022  Rio Grande do Sul   \n",
              "\n",
              "             formapagto centro_distribuicao responsavelpedido  valor_comissao  \\\n",
              "0              Dinheiro          Rapid Pink            Carlos            0.44   \n",
              "1                   Pix          Rapid Pink       Maria Linda            0.42   \n",
              "2       Boleto Bancário          Rapid Pink             Julia            0.88   \n",
              "3       Boleto Bancário          Rapid Pink              Yuri            0.76   \n",
              "4        Cartão Crédito          Rapid Pink           Dolores            0.44   \n",
              "...                 ...                 ...               ...             ...   \n",
              "200781    Cartão Débito         Papa Léguas           Antonio            0.42   \n",
              "200782    Cartão Débito         Papa Léguas            Tereza            0.26   \n",
              "200783   Cartão Crédito           Tree True           Beatriz            0.48   \n",
              "200784              Pix           Tree True           Vitória            0.52   \n",
              "200785    Cartão Débito           Tree True            Vivian            0.20   \n",
              "\n",
              "        lucro_liquido categoriaprod  \n",
              "0                17.6   Alimentação  \n",
              "1                16.8   Alimentação  \n",
              "2                35.2   Alimentação  \n",
              "3                30.4   Alimentação  \n",
              "4                17.6   Alimentação  \n",
              "...               ...           ...  \n",
              "200781           14.7     Acessório  \n",
              "200782            9.1     Acessório  \n",
              "200783           16.8     Acessório  \n",
              "200784           18.2     Acessório  \n",
              "200785            7.0     Acessório  \n",
              "\n",
              "[200786 rows x 14 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8a858a3f-b7c3-4b87-a1d1-a847392cad95\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cod_pedido</th>\n",
              "      <th>regiao_pais</th>\n",
              "      <th>produto</th>\n",
              "      <th>valor</th>\n",
              "      <th>quantidade</th>\n",
              "      <th>valor_total_bruto</th>\n",
              "      <th>data</th>\n",
              "      <th>estado</th>\n",
              "      <th>formapagto</th>\n",
              "      <th>centro_distribuicao</th>\n",
              "      <th>responsavelpedido</th>\n",
              "      <th>valor_comissao</th>\n",
              "      <th>lucro_liquido</th>\n",
              "      <th>categoriaprod</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Norte</td>\n",
              "      <td>Biscoito  True Champion 300g</td>\n",
              "      <td>22.00</td>\n",
              "      <td>2.0</td>\n",
              "      <td>44.00</td>\n",
              "      <td>13/06/2019</td>\n",
              "      <td>Acre</td>\n",
              "      <td>Dinheiro</td>\n",
              "      <td>Rapid Pink</td>\n",
              "      <td>Carlos</td>\n",
              "      <td>0.44</td>\n",
              "      <td>17.6</td>\n",
              "      <td>Alimentação</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Norte</td>\n",
              "      <td>Biscoito  True Champion 300g</td>\n",
              "      <td>21.00</td>\n",
              "      <td>2.0</td>\n",
              "      <td>42.00</td>\n",
              "      <td>03/01/2019</td>\n",
              "      <td>Amapá</td>\n",
              "      <td>Pix</td>\n",
              "      <td>Rapid Pink</td>\n",
              "      <td>Maria Linda</td>\n",
              "      <td>0.42</td>\n",
              "      <td>16.8</td>\n",
              "      <td>Alimentação</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Norte</td>\n",
              "      <td>Biscoito  True Champion 300g</td>\n",
              "      <td>22.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>44.00</td>\n",
              "      <td>18/01/2019</td>\n",
              "      <td>Pará</td>\n",
              "      <td>Boleto Bancário</td>\n",
              "      <td>Rapid Pink</td>\n",
              "      <td>Julia</td>\n",
              "      <td>0.88</td>\n",
              "      <td>35.2</td>\n",
              "      <td>Alimentação</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Norte</td>\n",
              "      <td>Biscoito  True Champion 300g</td>\n",
              "      <td>19.00</td>\n",
              "      <td>4.0</td>\n",
              "      <td>88.00</td>\n",
              "      <td>19/08/2019</td>\n",
              "      <td>Rondônia</td>\n",
              "      <td>Boleto Bancário</td>\n",
              "      <td>Rapid Pink</td>\n",
              "      <td>Yuri</td>\n",
              "      <td>0.76</td>\n",
              "      <td>30.4</td>\n",
              "      <td>Alimentação</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Norte</td>\n",
              "      <td>Biscoito  True Champion 300g</td>\n",
              "      <td>22.00</td>\n",
              "      <td>2.0</td>\n",
              "      <td>44.00</td>\n",
              "      <td>18/10/2019</td>\n",
              "      <td>Tocantins</td>\n",
              "      <td>Cartão Crédito</td>\n",
              "      <td>Rapid Pink</td>\n",
              "      <td>Dolores</td>\n",
              "      <td>0.44</td>\n",
              "      <td>17.6</td>\n",
              "      <td>Alimentação</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200781</th>\n",
              "      <td>200976</td>\n",
              "      <td>Sudeste</td>\n",
              "      <td>Bandana Disney Mickey Fábrica Petti</td>\n",
              "      <td>19.44</td>\n",
              "      <td>3.0</td>\n",
              "      <td>58.32</td>\n",
              "      <td>07/02/2022</td>\n",
              "      <td>Rio de Janeiro</td>\n",
              "      <td>Cartão Débito</td>\n",
              "      <td>Papa Léguas</td>\n",
              "      <td>Antonio</td>\n",
              "      <td>0.42</td>\n",
              "      <td>14.7</td>\n",
              "      <td>Acessório</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200782</th>\n",
              "      <td>200977</td>\n",
              "      <td>Sudeste</td>\n",
              "      <td>Bandana Disney Mickey Fábrica Petti</td>\n",
              "      <td>21.06</td>\n",
              "      <td>1.0</td>\n",
              "      <td>21.06</td>\n",
              "      <td>06/02/2022</td>\n",
              "      <td>Espírito Santo</td>\n",
              "      <td>Cartão Débito</td>\n",
              "      <td>Papa Léguas</td>\n",
              "      <td>Tereza</td>\n",
              "      <td>0.26</td>\n",
              "      <td>9.1</td>\n",
              "      <td>Acessório</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200783</th>\n",
              "      <td>200978</td>\n",
              "      <td>Sul</td>\n",
              "      <td>Bandana Disney Mickey Fábrica Petti</td>\n",
              "      <td>14.58</td>\n",
              "      <td>3.0</td>\n",
              "      <td>43.74</td>\n",
              "      <td>25/01/2022</td>\n",
              "      <td>Paraná</td>\n",
              "      <td>Cartão Crédito</td>\n",
              "      <td>Tree True</td>\n",
              "      <td>Beatriz</td>\n",
              "      <td>0.48</td>\n",
              "      <td>16.8</td>\n",
              "      <td>Acessório</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200784</th>\n",
              "      <td>200979</td>\n",
              "      <td>Sul</td>\n",
              "      <td>Bandana Disney Mickey Fábrica Petti</td>\n",
              "      <td>16.20</td>\n",
              "      <td>2.0</td>\n",
              "      <td>32.40</td>\n",
              "      <td>27/03/2022</td>\n",
              "      <td>Santa  Catarina</td>\n",
              "      <td>Pix</td>\n",
              "      <td>Tree True</td>\n",
              "      <td>Vitória</td>\n",
              "      <td>0.52</td>\n",
              "      <td>18.2</td>\n",
              "      <td>Acessório</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200785</th>\n",
              "      <td>200980</td>\n",
              "      <td>Sul</td>\n",
              "      <td>Bandana Disney Mickey Fábrica Petti</td>\n",
              "      <td>14.58</td>\n",
              "      <td>1.0</td>\n",
              "      <td>14.58</td>\n",
              "      <td>02/04/2022</td>\n",
              "      <td>Rio Grande do Sul</td>\n",
              "      <td>Cartão Débito</td>\n",
              "      <td>Tree True</td>\n",
              "      <td>Vivian</td>\n",
              "      <td>0.20</td>\n",
              "      <td>7.0</td>\n",
              "      <td>Acessório</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>200786 rows × 14 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a858a3f-b7c3-4b87-a1d1-a847392cad95')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8a858a3f-b7c3-4b87-a1d1-a847392cad95 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8a858a3f-b7c3-4b87-a1d1-a847392cad95');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-666df70a-3cf2-40d6-9308-0d5bcf16a550\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-666df70a-3cf2-40d6-9308-0d5bcf16a550')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-666df70a-3cf2-40d6-9308-0d5bcf16a550 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_4a5dcced-c6aa-46b9-8329-b7a97565a534\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('vendas')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_4a5dcced-c6aa-46b9-8329-b7a97565a534 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('vendas');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "vendas"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Avaliar data types\n",
        "vendas.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MzzpWqxxqMmS",
        "outputId": "119cfdc6-3ec0-42b3-b4e6-a180aa301cc0"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "cod_pedido               int64\n",
              "regiao_pais             object\n",
              "produto                 object\n",
              "valor                  float64\n",
              "quantidade              object\n",
              "valor_total_bruto      float64\n",
              "data                    object\n",
              "estado                  object\n",
              "formapagto              object\n",
              "centro_distribuicao     object\n",
              "responsavelpedido       object\n",
              "valor_comissao         float64\n",
              "lucro_liquido          float64\n",
              "categoriaprod           object\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#checar campos null existentes para 'quantidade'\n",
        "vendas['quantidade'].isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1X4AF_mOq9Xf",
        "outputId": "f082cc4c-5095-429b-f551-d1517670c5ea"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "520"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#como o campo 'quantidade' não era um campo numerico e haviam muitos campos null,\n",
        "#foram convertemos o campo em numerico e tratamos os campos invalidos\n",
        "vendas['quantidade'] = pd.to_numeric(vendas['quantidade'], errors='coerce')"
      ],
      "metadata": {
        "id": "lxuCkOokqYEG"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Para encontrar outliers, vamos calcular o intervalo entre 2 quartis\n",
        "Q1 = vendas['quantidade'].quantile(0.25)\n",
        "Q2 = vendas['quantidade'].quantile(0.75)\n",
        "IQR = Q2 - Q1\n",
        "IQR"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nnl5f-wVnpPU",
        "outputId": "d516a2ea-8025-4c10-e3af-0cdf8699a8a4"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#PARA ESTABELECER LIMITE, CALCULAR MEDIANA"
      ],
      "metadata": {
        "id": "l-ONeK5twzjh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#estabelecer um limite para identificar outliers (2)\n",
        "limite_inferior = Q1 - 2 * IQR\n",
        "limite_superior = Q2 + 2 * IQR"
      ],
      "metadata": {
        "id": "QQ-Mprm3paY3"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Identificar outliers\n",
        "outliers = vendas[(vendas['quantidade'] < limite_inferior) | (vendas['quantidade'] > limite_superior)]\n",
        "(\"Outliers:\")\n",
        "(outliers)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "vTlcvrxSsjaJ",
        "outputId": "0977ca11-da36-4694-b641-000e882bdede"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        cod_pedido   regiao_pais  \\\n",
              "30              31         Norte   \n",
              "156            157         Norte   \n",
              "165            166      Nordeste   \n",
              "183            184  Centro Oeste   \n",
              "228            229       Sudeste   \n",
              "...            ...           ...   \n",
              "200511      200706         Norte   \n",
              "200571      200766  Centro Oeste   \n",
              "200579      200774       Sudeste   \n",
              "200605      200800       Sudeste   \n",
              "200630      200825       Sudeste   \n",
              "\n",
              "                                                  produto   valor  quantidade  \\\n",
              "30                                Bola Pet Vinil Big Blue   21.00        71.0   \n",
              "156                             Roupa para Cão Billaboard   32.00        70.0   \n",
              "165                             Roupa para Cão Billaboard   43.00        70.0   \n",
              "183                         Vitamina E Granulado BigForce   72.00        70.0   \n",
              "228     Suplemento Alimentar Glutamina Mundo Animal Nu...   43.00        72.0   \n",
              "...                                                   ...     ...         ...   \n",
              "200511  Bebedouro e Comedouro Automático para Cães e G...   69.66        44.0   \n",
              "200571  Ração Royal Canin Club Performance para Cães A...  346.68        45.0   \n",
              "200579  Ração Royal Canin Club Performance para Cães A...  353.16        42.0   \n",
              "200605      Ração Royal Canin Exigent Gatos Adultos 1,5Kg  153.90        43.0   \n",
              "200630  Ração Úmida Royal Canin Lata Veterinary Cães A...   45.36        42.0   \n",
              "\n",
              "        valor_total_bruto        data            estado       formapagto  \\\n",
              "30                1491.00  21/12/2019           Roraima    Cartão Débito   \n",
              "156               2240.00  22/07/2019          Amazonas    Cartão Débito   \n",
              "165               3010.00  20/03/2019           Paraíba  Boleto Bancário   \n",
              "183               5040.00  13/06/2019       Mato Grosso              Pix   \n",
              "228               3096.00  04/10/2019    Espírito Santo    Cartão Débito   \n",
              "...                   ...         ...               ...              ...   \n",
              "200511            3065.04  27/02/2022              Acre         Dinheiro   \n",
              "200571           15600.60  07/04/2022  Distrito Federal              Pix   \n",
              "200579           14832.72  01/03/2022         São Paulo              Pix   \n",
              "200605            6617.70  27/02/2022      Minas Gerais   Cartão Crédito   \n",
              "200630            1905.12  01/03/2022      Minas Gerais         Dinheiro   \n",
              "\n",
              "       centro_distribuicao responsavelpedido  valor_comissao  lucro_liquido  \\\n",
              "30              Rapid Pink           Adriana           14.91          596.4   \n",
              "156             Rapid Pink            Silvia           23.80         1309.0   \n",
              "165             Gold Beach          Cristina           25.20         1386.0   \n",
              "183             Grãos Blue          Andressa           53.20         2926.0   \n",
              "228            Papa Léguas            Tereza           23.04         1267.2   \n",
              "...                    ...               ...             ...            ...   \n",
              "200511          Rapid Pink            Carlos           52.80          880.0   \n",
              "200571          Grãos Blue             Lucia          190.80         3816.0   \n",
              "200579         Papa Léguas            Miriam          180.60         3612.0   \n",
              "200605         Papa Léguas           Monique           87.72         2193.0   \n",
              "200630         Papa Léguas           Monique           21.84          546.0   \n",
              "\n",
              "                  categoriaprod  \n",
              "30                    Brinquedo  \n",
              "156                   Acessório  \n",
              "165                   Acessório  \n",
              "183                 Medicamento  \n",
              "228                 Medicamento  \n",
              "...                         ...  \n",
              "200511  Bebedouros e Comedouros  \n",
              "200571              Alimentação  \n",
              "200579              Alimentação  \n",
              "200605              Alimentação  \n",
              "200630              Alimentação  \n",
              "\n",
              "[6426 rows x 14 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-55548c37-e464-45f4-8f76-e478d2ef0af9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cod_pedido</th>\n",
              "      <th>regiao_pais</th>\n",
              "      <th>produto</th>\n",
              "      <th>valor</th>\n",
              "      <th>quantidade</th>\n",
              "      <th>valor_total_bruto</th>\n",
              "      <th>data</th>\n",
              "      <th>estado</th>\n",
              "      <th>formapagto</th>\n",
              "      <th>centro_distribuicao</th>\n",
              "      <th>responsavelpedido</th>\n",
              "      <th>valor_comissao</th>\n",
              "      <th>lucro_liquido</th>\n",
              "      <th>categoriaprod</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>31</td>\n",
              "      <td>Norte</td>\n",
              "      <td>Bola Pet Vinil Big Blue</td>\n",
              "      <td>21.00</td>\n",
              "      <td>71.0</td>\n",
              "      <td>1491.00</td>\n",
              "      <td>21/12/2019</td>\n",
              "      <td>Roraima</td>\n",
              "      <td>Cartão Débito</td>\n",
              "      <td>Rapid Pink</td>\n",
              "      <td>Adriana</td>\n",
              "      <td>14.91</td>\n",
              "      <td>596.4</td>\n",
              "      <td>Brinquedo</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>156</th>\n",
              "      <td>157</td>\n",
              "      <td>Norte</td>\n",
              "      <td>Roupa para Cão Billaboard</td>\n",
              "      <td>32.00</td>\n",
              "      <td>70.0</td>\n",
              "      <td>2240.00</td>\n",
              "      <td>22/07/2019</td>\n",
              "      <td>Amazonas</td>\n",
              "      <td>Cartão Débito</td>\n",
              "      <td>Rapid Pink</td>\n",
              "      <td>Silvia</td>\n",
              "      <td>23.80</td>\n",
              "      <td>1309.0</td>\n",
              "      <td>Acessório</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>165</th>\n",
              "      <td>166</td>\n",
              "      <td>Nordeste</td>\n",
              "      <td>Roupa para Cão Billaboard</td>\n",
              "      <td>43.00</td>\n",
              "      <td>70.0</td>\n",
              "      <td>3010.00</td>\n",
              "      <td>20/03/2019</td>\n",
              "      <td>Paraíba</td>\n",
              "      <td>Boleto Bancário</td>\n",
              "      <td>Gold Beach</td>\n",
              "      <td>Cristina</td>\n",
              "      <td>25.20</td>\n",
              "      <td>1386.0</td>\n",
              "      <td>Acessório</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>183</th>\n",
              "      <td>184</td>\n",
              "      <td>Centro Oeste</td>\n",
              "      <td>Vitamina E Granulado BigForce</td>\n",
              "      <td>72.00</td>\n",
              "      <td>70.0</td>\n",
              "      <td>5040.00</td>\n",
              "      <td>13/06/2019</td>\n",
              "      <td>Mato Grosso</td>\n",
              "      <td>Pix</td>\n",
              "      <td>Grãos Blue</td>\n",
              "      <td>Andressa</td>\n",
              "      <td>53.20</td>\n",
              "      <td>2926.0</td>\n",
              "      <td>Medicamento</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>228</th>\n",
              "      <td>229</td>\n",
              "      <td>Sudeste</td>\n",
              "      <td>Suplemento Alimentar Glutamina Mundo Animal Nu...</td>\n",
              "      <td>43.00</td>\n",
              "      <td>72.0</td>\n",
              "      <td>3096.00</td>\n",
              "      <td>04/10/2019</td>\n",
              "      <td>Espírito Santo</td>\n",
              "      <td>Cartão Débito</td>\n",
              "      <td>Papa Léguas</td>\n",
              "      <td>Tereza</td>\n",
              "      <td>23.04</td>\n",
              "      <td>1267.2</td>\n",
              "      <td>Medicamento</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200511</th>\n",
              "      <td>200706</td>\n",
              "      <td>Norte</td>\n",
              "      <td>Bebedouro e Comedouro Automático para Cães e G...</td>\n",
              "      <td>69.66</td>\n",
              "      <td>44.0</td>\n",
              "      <td>3065.04</td>\n",
              "      <td>27/02/2022</td>\n",
              "      <td>Acre</td>\n",
              "      <td>Dinheiro</td>\n",
              "      <td>Rapid Pink</td>\n",
              "      <td>Carlos</td>\n",
              "      <td>52.80</td>\n",
              "      <td>880.0</td>\n",
              "      <td>Bebedouros e Comedouros</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200571</th>\n",
              "      <td>200766</td>\n",
              "      <td>Centro Oeste</td>\n",
              "      <td>Ração Royal Canin Club Performance para Cães A...</td>\n",
              "      <td>346.68</td>\n",
              "      <td>45.0</td>\n",
              "      <td>15600.60</td>\n",
              "      <td>07/04/2022</td>\n",
              "      <td>Distrito Federal</td>\n",
              "      <td>Pix</td>\n",
              "      <td>Grãos Blue</td>\n",
              "      <td>Lucia</td>\n",
              "      <td>190.80</td>\n",
              "      <td>3816.0</td>\n",
              "      <td>Alimentação</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200579</th>\n",
              "      <td>200774</td>\n",
              "      <td>Sudeste</td>\n",
              "      <td>Ração Royal Canin Club Performance para Cães A...</td>\n",
              "      <td>353.16</td>\n",
              "      <td>42.0</td>\n",
              "      <td>14832.72</td>\n",
              "      <td>01/03/2022</td>\n",
              "      <td>São Paulo</td>\n",
              "      <td>Pix</td>\n",
              "      <td>Papa Léguas</td>\n",
              "      <td>Miriam</td>\n",
              "      <td>180.60</td>\n",
              "      <td>3612.0</td>\n",
              "      <td>Alimentação</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200605</th>\n",
              "      <td>200800</td>\n",
              "      <td>Sudeste</td>\n",
              "      <td>Ração Royal Canin Exigent Gatos Adultos 1,5Kg</td>\n",
              "      <td>153.90</td>\n",
              "      <td>43.0</td>\n",
              "      <td>6617.70</td>\n",
              "      <td>27/02/2022</td>\n",
              "      <td>Minas Gerais</td>\n",
              "      <td>Cartão Crédito</td>\n",
              "      <td>Papa Léguas</td>\n",
              "      <td>Monique</td>\n",
              "      <td>87.72</td>\n",
              "      <td>2193.0</td>\n",
              "      <td>Alimentação</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>200630</th>\n",
              "      <td>200825</td>\n",
              "      <td>Sudeste</td>\n",
              "      <td>Ração Úmida Royal Canin Lata Veterinary Cães A...</td>\n",
              "      <td>45.36</td>\n",
              "      <td>42.0</td>\n",
              "      <td>1905.12</td>\n",
              "      <td>01/03/2022</td>\n",
              "      <td>Minas Gerais</td>\n",
              "      <td>Dinheiro</td>\n",
              "      <td>Papa Léguas</td>\n",
              "      <td>Monique</td>\n",
              "      <td>21.84</td>\n",
              "      <td>546.0</td>\n",
              "      <td>Alimentação</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6426 rows × 14 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-55548c37-e464-45f4-8f76-e478d2ef0af9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-55548c37-e464-45f4-8f76-e478d2ef0af9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-55548c37-e464-45f4-8f76-e478d2ef0af9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-dd079e8d-b187-4464-a27c-7392348755bb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dd079e8d-b187-4464-a27c-7392348755bb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-dd079e8d-b187-4464-a27c-7392348755bb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_0700e67f-b8c1-4487-9900-980ec1f91227\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('outliers')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_0700e67f-b8c1-4487-9900-980ec1f91227 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('outliers');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "outliers",
              "repr_error": "'str' object has no attribute 'empty'"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "source": [
        "#REFAZER ESSE GRAFICO - FICOU MUITO RUIM A ANALISE\n",
        "from matplotlib import pyplot as plt\n",
        "import seaborn as sns\n",
        "def _plot_series(series, series_name, series_index=0):\n",
        "  from matplotlib import pyplot as plt\n",
        "  import seaborn as sns\n",
        "  palette = list(sns.palettes.mpl_palette('Dark2'))\n",
        "  xs = series['cod_pedido']\n",
        "  ys = series['valor']\n",
        "\n",
        "  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')\n",
        "df_sorted = outliers.sort_values('cod_pedido', ascending=True)\n",
        "for i, (series_name, series) in enumerate(df_sorted.groupby('formapagto')):\n",
        "  _plot_series(series, series_name, i)\n",
        "  fig.legend(title='formapagto', bbox_to_anchor=(1, 1), loc='upper left')\n",
        "sns.despine(fig=fig, ax=ax)\n",
        "plt.xlabel('cod_pedido')\n",
        "_ = plt.ylabel('valor')"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "aRf-FkDdusdS",
        "outputId": "ca9c7ea7-dfca-4cd9-e3db-a2b8a8a6515e"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x520 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "from matplotlib import pyplot as plt\n",
        "import seaborn as sns\n",
        "outliers.groupby('regiao_pais').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))\n",
        "plt.gca().spines[['top', 'right',]].set_visible(False)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "yP9RJz3JuWlA",
        "outputId": "b60100b5-84e3-450a-9ea5-22028d73acb9"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "from matplotlib import pyplot as plt\n",
        "import seaborn as sns\n",
        "outliers.groupby('centro_distribuicao').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))\n",
        "plt.gca().spines[['top', 'right',]].set_visible(False)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "QBEjc-eLuQme",
        "outputId": "58adb485-7caa-44c9-ead3-786444ae976a"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "from matplotlib import pyplot as plt\n",
        "import seaborn as sns\n",
        "outliers.groupby('categoriaprod').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))\n",
        "plt.gca().spines[['top', 'right',]].set_visible(False)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "6SrIn6MXuI4d",
        "outputId": "27fa81db-b864-4d83-f193-a615a2208d0a"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Calculo de medida de variabilidade desconsiderando outliers: Desvio médio absoluto\n",
        "\n",
        "#Aqui, vamos verificar o Desvio médio considerando as variáveis quantidade e preço total bruto\n",
        "vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "aGvOJtycxKFc",
        "outputId": "a91fc902-625b-48a5-cecb-fc88606a5422"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n",
            "<ipython-input-42-250e48f39d29>:4: FutureWarning: The 'mad' method is deprecated and will be removed in a future version. To compute the same result, you may do `(df - df.mean()).abs().mean()`.\n",
            "  vendas.groupby('quantidade')                .agg(desvio_medio_vendas = pd.NamedAgg('valor_total_bruto', 'mad'))                .reset_index()\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   quantidade  desvio_medio_vendas\n",
              "0         1.0           314.185714\n",
              "1         2.0           400.495572\n",
              "2         3.0           249.434213\n",
              "3         4.0            26.332436\n",
              "4        20.0          5745.123967\n",
              "..        ...                  ...\n",
              "63         73          7592.541963\n",
              "64         74          1855.087500\n",
              "65         83         10902.758861\n",
              "66         84         11143.894340\n",
              "67         88          9714.673660\n",
              "\n",
              "[68 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-785d2f86-01d1-4a02-ac29-6a08213ba414\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>quantidade</th>\n",
              "      <th>desvio_medio_vendas</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>314.185714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.0</td>\n",
              "      <td>400.495572</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3.0</td>\n",
              "      <td>249.434213</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.0</td>\n",
              "      <td>26.332436</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20.0</td>\n",
              "      <td>5745.123967</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>73</td>\n",
              "      <td>7592.541963</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64</th>\n",
              "      <td>74</td>\n",
              "      <td>1855.087500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65</th>\n",
              "      <td>83</td>\n",
              "      <td>10902.758861</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>84</td>\n",
              "      <td>11143.894340</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67</th>\n",
              "      <td>88</td>\n",
              "      <td>9714.673660</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>68 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-785d2f86-01d1-4a02-ac29-6a08213ba414')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-785d2f86-01d1-4a02-ac29-6a08213ba414 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-785d2f86-01d1-4a02-ac29-6a08213ba414');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-faa66572-8ee5-4867-861f-9df1aadc617c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-faa66572-8ee5-4867-861f-9df1aadc617c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-faa66572-8ee5-4867-861f-9df1aadc617c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"vendas\",\n  \"rows\": 68,\n  \"fields\": [\n    {\n      \"column\": \"quantidade\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 68,\n        \"samples\": [\n          \"5\",\n          45.0,\n          20.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"desvio_medio_vendas\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3618.445106590908,\n        \"min\": 0.0,\n        \"max\": 14803.067474048443,\n        \"num_unique_values\": 65,\n        \"samples\": [\n          5592.914236423406,\n          7592.541963117193,\n          314.1857138438296\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "G-X0ohYt2eGx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "- Cerca de 6 mil registros (ou 3,2% dos pedidos) são outliers e possuem mais itens do que o comum (EU DEVERIA TER CALCULADO A MEDIANA TALVEZ)\n",
        "- Essas vendas são, em sua maioria:\n",
        "   - de itens de alimentação\n",
        "   - em sua maioria, do Sudeste e Norte do país\n",
        "   - a maior parte saem de 2 centros de distribuição específicos\n"
      ],
      "metadata": {
        "id": "ckyXtId-vA0e"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "_Ndp4hiXv66m"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
